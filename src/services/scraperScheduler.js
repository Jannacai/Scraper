const { scrapeXSMB } = require('../../scraper');
const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh timezone cho Vi·ªát Nam
process.env.TZ = 'Asia/Ho_Chi_Minh';

class ScraperScheduler {
    constructor() {
        this.isRunning = false;
        this.lastRunDate = null;
        this.schedulerInterval = null;
        this.lockFile = path.join(__dirname, '../../scraper.lock');
        this.statusFile = path.join(__dirname, '../../scraper.status.json');

        // ‚úÖ T·ªêI ∆ØU: Cache ƒë·ªÉ gi·∫£m I/O operations
        this.statusCache = null;
        this.lastStatusUpdate = 0;
        this.statusCacheDuration = 30 * 1000; // 30 gi√¢y cache

        // ‚úÖ T·ªêI ∆ØU: Debounce ƒë·ªÉ tr√°nh spam logs
        this.lastLogTime = 0;
        this.logDebounceTime = 5000; // 5 gi√¢y

        // ‚úÖ T·ªêI ∆ØU: Performance monitoring
        this.performanceStats = {
            totalChecks: 0,
            successfulRuns: 0,
            failedRuns: 0,
            averageCheckTime: 0,
            lastCheckTime: 0
        };

        this.initializeScheduler();
    }

    // Kh·ªüi t·∫°o scheduler
    initializeScheduler() {
        console.log('üöÄ Kh·ªüi t·∫°o Scraper Scheduler cho XSMB...');

        // Ki·ªÉm tra v√† t·∫°o file status n·∫øu ch∆∞a c√≥
        this.ensureStatusFile();

        // B·∫Øt ƒë·∫ßu scheduler
        this.startScheduler();

        // X·ª≠ l√Ω graceful shutdown
        this.handleGracefulShutdown();
    }

    // ƒê·∫£m b·∫£o file status t·ªìn t·∫°i
    ensureStatusFile() {
        if (!fs.existsSync(this.statusFile)) {
            const initialStatus = {
                lastRun: null,
                nextRun: this.calculateNextRun(),
                isRunning: false,
                lastError: null,
                totalRuns: 0,
                successfulRuns: 0,
                failedRuns: 0,
                performanceStats: this.performanceStats
            };
            fs.writeFileSync(this.statusFile, JSON.stringify(initialStatus, null, 2));
        }
    }

    // T√≠nh to√°n th·ªùi gian ch·∫°y ti·∫øp theo (18h14)
    calculateNextRun() {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const targetTime = new Date(today.getTime() + (18 * 60 + 14) * 60 * 1000); // 18h14

        // N·∫øu ƒë√£ qua 18h14 h√¥m nay, l√™n l·ªãch cho ng√†y mai
        if (now >= targetTime) {
            targetTime.setDate(targetTime.getDate() + 1);
        }

        return targetTime.toISOString();
    }

    // ‚úÖ T·ªêI ∆ØU: B·∫Øt ƒë·∫ßu scheduler v·ªõi interval th√¥ng minh
    startScheduler() {
        if (this.schedulerInterval) {
            clearInterval(this.schedulerInterval);
        }

        // ‚úÖ T·ªêI ∆ØU: Ki·ªÉm tra th√¥ng minh - ch·ªâ check v√†o ph√∫t 14
        const now = new Date();
        const currentMinute = now.getMinutes();
        const currentSecond = now.getSeconds();

        // T√≠nh th·ªùi gian ƒë·∫øn ph√∫t ti·∫øp theo c√≥ th·ªÉ ch·∫°y
        let initialDelay = 60 * 1000; // M·∫∑c ƒë·ªãnh 1 ph√∫t

        if (currentMinute === 13) {
            // N·∫øu ƒëang ·ªü ph√∫t 13, ch·ªù ƒë·∫øn ph√∫t 14
            initialDelay = (60 - currentSecond) * 1000;
        } else if (currentMinute === 14) {
            // N·∫øu ƒëang ·ªü ph√∫t 14, ch·∫°y ngay
            initialDelay = 0;
        } else {
            // T√≠nh th·ªùi gian ƒë·∫øn ph√∫t 14 ti·∫øp theo
            const minutesToNext = (14 - currentMinute + 60) % 60;
            initialDelay = (minutesToNext * 60 - currentSecond) * 1000;
        }

        // ‚úÖ T·ªêI ∆ØU: Ch·∫°y ngay l·∫≠p t·ª©c n·∫øu c·∫ßn
        if (initialDelay === 0) {
            this.checkAndRun();
        }

        // ‚úÖ T·ªêI ∆ØU: Interval th√¥ng minh - ch·ªâ check v√†o ph√∫t 14
        this.schedulerInterval = setInterval(() => {
            this.checkAndRun();
        }, 60 * 1000); // 1 ph√∫t

        console.log(`‚úÖ Scheduler ƒë√£ kh·ªüi ƒë·ªông, ki·ªÉm tra th√¥ng minh (delay: ${Math.round(initialDelay / 1000)}s)`);
        this.logStatus();
    }

    // ‚úÖ T·ªêI ∆ØU: Ki·ªÉm tra v√† ch·∫°y scraper v·ªõi performance monitoring
    async checkAndRun() {
        const startTime = Date.now();
        this.performanceStats.totalChecks++;

        try {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();

            // ‚úÖ T·ªêI ∆ØU: Ch·ªâ check v√†o ph√∫t 14 ƒë·ªÉ ti·∫øt ki·ªám CPU
            if (currentHour === 18 && currentMinute === 14) {
                // Ki·ªÉm tra xem ƒë√£ ch·∫°y h√¥m nay ch∆∞a
                const today = now.toDateString();
                if (this.lastRunDate === today) {
                    this.logWithDebounce('‚è∞ Scraper ƒë√£ ch·∫°y h√¥m nay, b·ªè qua');
                    return;
                }

                // ‚úÖ T·ªêI ∆ØU: Ki·ªÉm tra lock file v·ªõi timeout
                if (await this.isLockedWithTimeout()) {
                    this.logWithDebounce('üîí Scraper ƒëang ch·∫°y, b·ªè qua');
                    return;
                }

                await this.runScraper();
            }
        } catch (error) {
            console.error('‚ùå L·ªói trong scheduler:', error.message);
            this.updateStatus({ lastError: error.message });
            this.performanceStats.failedRuns++;
        } finally {
            // ‚úÖ T·ªêI ∆ØU: C·∫≠p nh·∫≠t performance stats
            const checkTime = Date.now() - startTime;
            this.performanceStats.lastCheckTime = checkTime;
            this.performanceStats.averageCheckTime =
                (this.performanceStats.averageCheckTime * (this.performanceStats.totalChecks - 1) + checkTime) / this.performanceStats.totalChecks;
        }
    }

    // ‚úÖ T·ªêI ∆ØU: Log v·ªõi debounce ƒë·ªÉ tr√°nh spam
    logWithDebounce(message) {
        const now = Date.now();
        if (now - this.lastLogTime > this.logDebounceTime) {
            console.log(message);
            this.lastLogTime = now;
        }
    }

    // ‚úÖ T·ªêI ∆ØU: Ki·ªÉm tra lock v·ªõi timeout
    async isLockedWithTimeout() {
        return new Promise((resolve) => {
            const timeout = setTimeout(() => {
                resolve(false); // Timeout, coi nh∆∞ kh√¥ng locked
            }, 1000); // 1 gi√¢y timeout

            try {
                if (fs.existsSync(this.lockFile)) {
                    const lockData = JSON.parse(fs.readFileSync(this.lockFile, 'utf8'));
                    const lockTime = new Date(lockData.timestamp);
                    const now = new Date();

                    // Lock h·∫øt h·∫°n sau 30 ph√∫t
                    if (now.getTime() - lockTime.getTime() > 30 * 60 * 1000) {
                        this.removeLock();
                        clearTimeout(timeout);
                        resolve(false);
                        return;
                    }
                    clearTimeout(timeout);
                    resolve(true);
                    return;
                }
                clearTimeout(timeout);
                resolve(false);
            } catch (error) {
                console.error('L·ªói ki·ªÉm tra lock file:', error.message);
                clearTimeout(timeout);
                resolve(false);
            }
        });
    }

    // Ki·ªÉm tra lock file (legacy - gi·ªØ l·∫°i cho compatibility)
    isLocked() {
        try {
            if (fs.existsSync(this.lockFile)) {
                const lockData = JSON.parse(fs.readFileSync(this.lockFile, 'utf8'));
                const lockTime = new Date(lockData.timestamp);
                const now = new Date();

                // Lock h·∫øt h·∫°n sau 30 ph√∫t
                if (now.getTime() - lockTime.getTime() > 30 * 60 * 1000) {
                    this.removeLock();
                    return false;
                }
                return true;
            }
            return false;
        } catch (error) {
            console.error('L·ªói ki·ªÉm tra lock file:', error.message);
            return false;
        }
    }

    // T·∫°o lock file
    createLock() {
        try {
            const lockData = {
                timestamp: new Date().toISOString(),
                pid: process.pid
            };
            fs.writeFileSync(this.lockFile, JSON.stringify(lockData, null, 2));
        } catch (error) {
            console.error('L·ªói t·∫°o lock file:', error.message);
        }
    }

    // X√≥a lock file
    removeLock() {
        try {
            if (fs.existsSync(this.lockFile)) {
                fs.unlinkSync(this.lockFile);
            }
        } catch (error) {
            console.error('L·ªói x√≥a lock file:', error.message);
        }
    }

    // ‚úÖ T·ªêI ∆ØU: Ch·∫°y scraper v·ªõi error handling t·ªët h∆°n
    async runScraper() {
        const startTime = Date.now();

        try {
            console.log('üéØ B·∫Øt ƒë·∫ßu ch·∫°y scraper XSMB t·ª± ƒë·ªông...');

            this.createLock();
            this.isRunning = true;
            this.updateStatus({ isRunning: true, lastRun: new Date().toISOString() });

            // L·∫•y ng√†y hi·ªán t·∫°i
            const today = new Date();
            const date = today.toLocaleDateString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            }).split('/').join('/');

            console.log(`üìÖ Ch·∫°y scraper cho ng√†y: ${date}, ƒë√†i: xsmb`);

            // ‚úÖ T·ªêI ∆ØU: Ch·∫°y scraper v·ªõi timeout
            const scraperPromise = scrapeXSMB(date, 'xsmb');
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Scraper timeout after 20 minutes')), 20 * 60 * 1000);
            });

            await Promise.race([scraperPromise, timeoutPromise]);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
            this.lastRunDate = today.toDateString();
            this.performanceStats.successfulRuns++;

            this.updateStatus({
                isRunning: false,
                totalRuns: this.getStatus().totalRuns + 1,
                successfulRuns: this.performanceStats.successfulRuns,
                failedRuns: this.performanceStats.failedRuns,
                lastError: null,
                performanceStats: this.performanceStats
            });

            const duration = Date.now() - startTime;
            console.log(`‚úÖ Scraper XSMB ho√†n th√†nh th√†nh c√¥ng trong ${Math.round(duration / 1000)}s`);

        } catch (error) {
            console.error('‚ùå L·ªói khi ch·∫°y scraper:', error.message);
            this.performanceStats.failedRuns++;

            this.updateStatus({
                isRunning: false,
                totalRuns: this.getStatus().totalRuns + 1,
                successfulRuns: this.performanceStats.successfulRuns,
                failedRuns: this.performanceStats.failedRuns,
                lastError: error.message,
                performanceStats: this.performanceStats
            });
        } finally {
            this.removeLock();
            this.isRunning = false;
        }
    }

    // ‚úÖ T·ªêI ∆ØU: L·∫•y tr·∫°ng th√°i v·ªõi cache
    getStatus() {
        const now = Date.now();

        // S·ª≠ d·ª•ng cache n·∫øu c√≤n valid
        if (this.statusCache && (now - this.lastStatusUpdate) < this.statusCacheDuration) {
            return this.statusCache;
        }

        try {
            if (fs.existsSync(this.statusFile)) {
                const status = JSON.parse(fs.readFileSync(this.statusFile, 'utf8'));
                // ‚úÖ T·ªêI ∆ØU: C·∫≠p nh·∫≠t cache
                this.statusCache = status;
                this.lastStatusUpdate = now;
                return status;
            }
            return {
                lastRun: null,
                nextRun: this.calculateNextRun(),
                isRunning: false,
                lastError: null,
                totalRuns: 0,
                successfulRuns: 0,
                failedRuns: 0,
                performanceStats: this.performanceStats
            };
        } catch (error) {
            console.error('L·ªói ƒë·ªçc status file:', error.message);
            return {
                lastRun: null,
                nextRun: this.calculateNextRun(),
                isRunning: false,
                lastError: null,
                totalRuns: 0,
                successfulRuns: 0,
                failedRuns: 0,
                performanceStats: this.performanceStats
            };
        }
    }

    // ‚úÖ T·ªêI ∆ØU: C·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªõi cache invalidation
    updateStatus(updates) {
        try {
            const status = this.getStatus();
            const updatedStatus = { ...status, ...updates };
            fs.writeFileSync(this.statusFile, JSON.stringify(updatedStatus, null, 2));

            // ‚úÖ T·ªêI ∆ØU: Invalidate cache
            this.statusCache = null;
            this.lastStatusUpdate = 0;
        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t status file:', error.message);
        }
    }

    // ‚úÖ T·ªêI ∆ØU: Log tr·∫°ng th√°i v·ªõi performance stats
    logStatus() {
        const status = this.getStatus();
        const nextRun = new Date(status.nextRun);
        console.log('üìä Tr·∫°ng th√°i Scheduler:');
        console.log(`   - L·∫ßn ch·∫°y cu·ªëi: ${status.lastRun ? new Date(status.lastRun).toLocaleString('vi-VN') : 'Ch∆∞a c√≥'}`);
        console.log(`   - L·∫ßn ch·∫°y ti·∫øp theo: ${nextRun.toLocaleString('vi-VN')}`);
        console.log(`   - ƒêang ch·∫°y: ${status.isRunning ? 'C√≥' : 'Kh√¥ng'}`);
        console.log(`   - T·ªïng l·∫ßn ch·∫°y: ${status.totalRuns}`);
        console.log(`   - Th√†nh c√¥ng: ${status.successfulRuns}`);
        console.log(`   - Th·∫•t b·∫°i: ${status.failedRuns}`);
        console.log(`   - Performance: ${Math.round(this.performanceStats.averageCheckTime)}ms/check`);
        if (status.lastError) {
            console.log(`   - L·ªói cu·ªëi: ${status.lastError}`);
        }
    }

    // X·ª≠ l√Ω graceful shutdown
    handleGracefulShutdown() {
        const cleanup = () => {
            console.log('üõë ƒêang d·ª´ng Scheduler...');
            if (this.schedulerInterval) {
                clearInterval(this.schedulerInterval);
            }
            this.removeLock();
            this.updateStatus({ isRunning: false });
            console.log('‚úÖ Scheduler ƒë√£ d·ª´ng an to√†n');
            process.exit(0);
        };

        process.on('SIGINT', cleanup);
        process.on('SIGTERM', cleanup);
        process.on('uncaughtException', (error) => {
            console.error('‚ùå Uncaught Exception:', error.message);
            cleanup();
        });
    }

    // D·ª´ng scheduler
    stop() {
        if (this.schedulerInterval) {
            clearInterval(this.schedulerInterval);
            this.schedulerInterval = null;
        }
        this.removeLock();
        this.updateStatus({ isRunning: false });
        console.log('üõë Scheduler ƒë√£ d·ª´ng');
    }

    // Kh·ªüi ƒë·ªông l·∫°i scheduler
    restart() {
        console.log('üîÑ Kh·ªüi ƒë·ªông l·∫°i Scheduler...');
        this.stop();
        this.startScheduler();
    }
}

// T·∫°o instance singleton
const scraperScheduler = new ScraperScheduler();

module.exports = scraperScheduler;