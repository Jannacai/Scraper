const express = require('express');
const { scrapeXSMB } = require('../../../scraper');
const scraperScheduler = require('../../services/scraperScheduler');
const router = express.Router();

console.log('scrapeXSMB:', scrapeXSMB); // Debug require

// Endpoint ƒë·ªÉ k√≠ch ho·∫°t c√†o d·ªØ li·ªáu theo ng√†y
router.post('/scrape', async (req, res) => {
    try {
        console.log('Received POST /api/scraper/scrape:', req.body); // Debug request
        if (!req.body) {
            return res.status(400).json({ message: 'Request body is missing or invalid' });
        }
        const { date, station } = req.body;
        if (!date || !station) {
            return res.status(400).json({ message: 'Thi·∫øu date ho·∫∑c station' });
        }
        console.log(`B·∫Øt ƒë·∫ßu c√†o d·ªØ li·ªáu cho ng√†y ${date}, ƒë√†i ${station}`);
        scrapeXSMB(date, station); // Ch·∫°y b·∫•t ƒë·ªìng b·ªô
        res.status(200).json({ message: `ƒê√£ k√≠ch ho·∫°t c√†o d·ªØ li·ªáu cho ng√†y ${date}, ƒë√†i ${station}` });
    } catch (error) {
        console.error('L·ªói khi k√≠ch ho·∫°t scraper:', error.message);
        res.status(500).json({ message: 'L·ªói khi k√≠ch ho·∫°t scraper', error: error.message });
    }
});

// Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i scraper
router.get('/status', (req, res) => {
    res.status(200).json({ message: 'Scraper API is running' });
});

// Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i scheduler
router.get('/scheduler/status', (req, res) => {
    try {
        const status = scraperScheduler.getStatus();
        res.status(200).json({
            success: true,
            data: status,
            message: 'Tr·∫°ng th√°i scheduler XSMB'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y tr·∫°ng th√°i scheduler',
            error: error.message
        });
    }
});

// Endpoint ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i scheduler
router.post('/scheduler/restart', (req, res) => {
    try {
        scraperScheduler.restart();
        res.status(200).json({
            success: true,
            message: 'Scheduler XSMB ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i'
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'L·ªói khi kh·ªüi ƒë·ªông l·∫°i scheduler',
            error: error.message
        });
    }
});

// Endpoint ƒë·ªÉ ch·∫°y scraper th·ªß c√¥ng
router.post('/scheduler/run-now', async (req, res) => {
    try {
        const { date, station = 'xsmb' } = req.body;
        
        if (!date) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu tham s·ªë date'
            });
        }

        console.log(`üéØ Ch·∫°y scraper XSMB th·ªß c√¥ng cho ng√†y ${date}, ƒë√†i ${station}`);
        
        // Ch·∫°y scraper trong background
        scraperScheduler.runScraper().catch(error => {
            console.error('L·ªói khi ch·∫°y scraper th·ªß c√¥ng:', error);
        });

        res.status(200).json({
            success: true,
            message: `ƒê√£ k√≠ch ho·∫°t scraper XSMB cho ng√†y ${date}, ƒë√†i ${station}`
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'L·ªói khi ch·∫°y scraper th·ªß c√¥ng',
            error: error.message
        });
    }
});

module.exports = router;